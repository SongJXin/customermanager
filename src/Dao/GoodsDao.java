package Dao;

import Po.Goods;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import util.DBConnection;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : customermanager
//  @ File Name : GoodsDao.java
//  @ Date : 2017/7/9
//  @ Author : 宋健鑫
//
//
public class GoodsDao {

    /**
     * 添加商品
     *
     * @param goods 商品
     * @return int
     */
    public int add(Goods goods) {
        int i = 0;
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        String sqlString = "INSERT INTO `customermanager`.`goods` (`g_brand`, `g_name`, `g_pricingway`, `g_inventory`, `g_price`, `g_remark`) VALUES (?, ?, ?, ?, ?, ?);";
        try {
            connection = DBConnection.getConnection();
            preparedStatement = connection.prepareStatement(sqlString);
            preparedStatement.setString(1, goods.getG_Brand());
            preparedStatement.setString(2, goods.getG_Name());
            preparedStatement.setString(3, goods.getG_Pricingway());
            preparedStatement.setFloat(4, goods.getG_Inventory());
            preparedStatement.setFloat(5, goods.getG_Price());
            preparedStatement.setString(6, goods.getG_Remark());
            i = preparedStatement.executeUpdate();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "SQL ERROR", JOptionPane.ERROR_MESSAGE);
        } finally {
            DBConnection.closeConn(connection);
            DBConnection.closeStmt(preparedStatement);
        }
        return i;

    }

    /**
     * 删除商品
     *
     * @param goods 商品
     * @return int
     */
    public int delete(Goods goods) {
        int i = 0;
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        String sqlString = "delete from `customermanager`.`goods` where g_id=?;";
        try {
            connection = DBConnection.getConnection();
            preparedStatement = connection.prepareStatement(sqlString);
            preparedStatement.setInt(1, goods.getG_ID());
            i = preparedStatement.executeUpdate();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "SQL ERROR", JOptionPane.ERROR_MESSAGE);
        } finally {
            DBConnection.closeConn(connection);
            DBConnection.closeStmt(preparedStatement);
        }
        return i;

    }
    //UPDATE `customermanager`.`goods` SET `g_brand`=?, `g_name`=?, `g_pricingway`=?, `g_inventory`=?, `g_price`=?, `g_remark`=? WHERE `g_id`=?;

    /**
     * 修改商品信息
     *
     * @param goods 商品
     * @return int
     */
    public int update(Goods goods) {
        int i = 0;
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        String sqlString = "UPDATE `customermanager`.`goods` SET `g_brand`=?, `g_name`=?, `g_pricingway`=?, `g_inventory`=?, `g_price`=?, `g_remark`=? WHERE `g_id`=?;";
        try {
            connection = DBConnection.getConnection();
            preparedStatement = connection.prepareStatement(sqlString);
            preparedStatement.setString(1, goods.getG_Brand());
            preparedStatement.setString(2, goods.getG_Name());
            preparedStatement.setString(3, goods.getG_Pricingway());
            preparedStatement.setFloat(4, goods.getG_Inventory());
            preparedStatement.setFloat(5, goods.getG_Price());
            preparedStatement.setString(6, goods.getG_Remark());
            preparedStatement.setInt(7, goods.getG_ID());
            i = preparedStatement.executeUpdate();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "SQL ERROR", JOptionPane.ERROR_MESSAGE);
        } finally {
            DBConnection.closeConn(connection);
            DBConnection.closeStmt(preparedStatement);
        }
        return i;

    }
    //`g_brand`, `g_name`, `g_pricingway`, `g_inventory`, `g_price`, `g_remark`
    /**
     * 按照id查找商品
     *
     * @param id id 
     * @return 商品信息
     */
    public Goods find(int id) {
        Goods goods = new Goods();
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        String sqlString = "select * from `customermanager`.`goods` WHERE `g_id`=?;";
        try {
            connection = DBConnection.getConnection();
            preparedStatement = connection.prepareStatement(sqlString);
            preparedStatement.setInt(1, id);
            ResultSet rs = preparedStatement.executeQuery();
            goods.setG_ID(id);
            if (rs.next()) {
                goods.setG_Brand(rs.getString("g_brand"));
                goods.setG_Inventory(rs.getFloat("g_inventory"));
                goods.setG_Name(rs.getString("g_name"));
                goods.setG_Price(rs.getFloat("g_price"));
                goods.setG_Pricingway(rs.getString("g_pricingway"));
                goods.setG_Remark(rs.getString("g_remark"));
            } else {
                JOptionPane.showMessageDialog(null, new JLabel("<html><h1>没有找到记录</h1></html>"), "查无此项", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            // System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(null, e.getMessage(), "SQL ERROR", JOptionPane.ERROR_MESSAGE);
        } finally {
            DBConnection.closeConn(connection);
            DBConnection.closeStmt(preparedStatement);
        }
        return goods;
    }
    //`g_brand`, `g_name`, `g_pricingway`, `g_inventory`, `g_price`, `g_remark`

    /**
     * 按条件检索商品
     *
     * @param nameString 商品名
     * @param brandString 商品品牌
     * @param pricingwaysString 支付方式
     * @param numbig 库存量大于
     * @param numsmall 库存量小于
     * @param pricebig 价格大于
     * @param pricesmall 价格小于
     * @return list
     */
    public ArrayList list(String nameString, String brandString, String pricingwaysString, String numbig, String numsmall, String pricebig, String pricesmall) {
        ResultSet resultSet = null;
        Connection connection = null;

        ArrayList<HashMap<String, Object>> list = new ArrayList<>();
        PreparedStatement preparedStatement = null;
        //初始化sql语句
        String sqlString = "SELECT * FROM customermanager.goods where ";
        if (!"".equals(nameString)) {
            sqlString += "g_name like '%" + nameString + "%' and ";
        }
        if (!"".equals(brandString)) {
            sqlString += "g_brand like '%" + brandString + "%' and ";
        }
        if (!"".equals(pricingwaysString)) {
            sqlString += "g_pricingway = \"" + pricingwaysString + "\" and ";
        }
        if (!"".equals(numbig)) {
            sqlString += "g_inventory >" + numbig + " and ";
        }
        if (!"".equals(numsmall)) {
            sqlString += "g_inventory <" + numsmall + " and ";
        }
        if (!"".equals(pricebig)) {
            sqlString += "g_price >" + pricebig + " and ";
        }
        if (!"".equals(pricesmall)) {
            sqlString += "g_price <" + pricesmall + " and ";
        }
        sqlString += " 1 = 1;";
        // System.out.println(sqlString);
        try {
            connection = DBConnection.getConnection();
            preparedStatement = connection.prepareStatement(sqlString);
            resultSet = preparedStatement.executeQuery();
            //结果保存到list
            ResultSetMetaData mdData = resultSet.getMetaData();
            int columnCount = mdData.getColumnCount();
            while (resultSet.next()) {
                HashMap<String, Object> rowDataMap = new HashMap();
                //`g_brand`, `g_name`, `g_pricingway`, `g_inventory`, `g_price`, `g_remark`
                rowDataMap.put("g_id", resultSet.getInt("g_id"));
                rowDataMap.put("g_brand", resultSet.getString("g_brand"));
                rowDataMap.put("g_name", resultSet.getString("g_name"));
                rowDataMap.put("g_pricingway", resultSet.getString("g_pricingway"));
                rowDataMap.put("g_inventory", resultSet.getFloat("g_inventory"));
                rowDataMap.put("g_price", resultSet.getFloat("g_price"));
                rowDataMap.put("g_remark", resultSet.getString("g_remark"));
                list.add(rowDataMap);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "SQL ERROR", JOptionPane.ERROR_MESSAGE);
        } finally {
            DBConnection.closeConn(connection);
            DBConnection.closeStmt(preparedStatement);
            DBConnection.closeRs(resultSet);
        }
        return list;
    }
}
