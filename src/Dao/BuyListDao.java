package Dao;

import Po.BuyList;
import java.sql.ResultSet;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.ResultSetMetaData;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import util.DBConnection;
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : customermanager
//  @ File Name : BuyListDao.java
//  @ Date : 2017/7/9
//  @ Author : 宋健鑫
//
//

public class BuyListDao {

    /**
     * 添加进货记录
     *
     * @param list 购买列表
     * @return int
     */
    public int add(BuyList list) {
        int i = 0;
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        String sqlString = "INSERT INTO `customermanager`.`buylist` (`b_goods_id`, `b_goods_name`, `b_goods_brand`, `b_number`, `b_remark`,`b_date`) VALUES (?, ?, ?, ?, ? ,?);";
        try {
            connection = DBConnection.getConnection();
            preparedStatement = connection.prepareStatement(sqlString);
            preparedStatement.setInt(1, list.getB_Goods_ID());
            preparedStatement.setString(2, list.getB_Goods_Name());
            preparedStatement.setString(3, list.getB_Goods_Brand());
            preparedStatement.setFloat(4, list.getB_Number());
            preparedStatement.setString(5, list.getB_Remark());
            preparedStatement.setDate(6, new java.sql.Date(list.getB_Date_Time().getTime()));
            i = preparedStatement.executeUpdate();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "SQL ERROR", JOptionPane.ERROR_MESSAGE);
        } finally {
            DBConnection.closeConn(connection);
            DBConnection.closeStmt(preparedStatement);
        }
        return i;

    }

    /*	//不可操作
	public int delete(BuyList list) （
        return 0;
	}
	
        //不可操作
	public int update(BuyList list) {
            return 0;
	}*/
    //SELECT * FROM customermanager.buylist where b_id = ?;
    //`b_goods_id`, `b_goods_name`, `b_goods_brand`, `b_number`, `b_remark`, `b_date` `b_ID`
    /**
     * 查找
     *
     * @param id id
     * @return 记录
     */
    public BuyList find(int id) {
        BuyList buyList = new BuyList();
        ResultSet resultSet = null;
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        String sqlString = "SELECT * FROM customermanager.buylist where b_id = ?;";
        try {
            connection = DBConnection.getConnection();
            preparedStatement = connection.prepareStatement(sqlString);
            preparedStatement.setInt(1, id);
            resultSet = preparedStatement.executeQuery();
            if (resultSet.next()) {
                buyList.setB_Date_Time(resultSet.getDate("b_date"));
                buyList.setB_Goods_Brand(resultSet.getString("b_goods_brand"));
                buyList.setB_Goods_ID(resultSet.getInt("b_goods_id"));
                buyList.setB_Goods_Name(resultSet.getString("b_goods_name"));
                buyList.setB_ID(id);
                buyList.setB_Number(resultSet.getFloat("b_number"));
                buyList.setB_Remark(resultSet.getString("b_remark"));
            } else {
                JOptionPane.showMessageDialog(null, new JLabel("<html><h1>没有找到记录</h1></html>"), "查无此项", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "SQL ERROR", JOptionPane.ERROR_MESSAGE);
        } finally {
            DBConnection.closeConn(connection);
            DBConnection.closeStmt(preparedStatement);
            DBConnection.closeRs(resultSet);
        }
        return buyList;

    }

    /**
     * 按照条件查找
     *
     * @param beginDate 开始时间
     * @param endDate 结束时间
     * @param nameString 商品名
     * @return list
     */
    public ArrayList list(String beginDate, String endDate, String nameString) {
        ResultSet resultSet = null;
        Connection connection = null;
        ArrayList<HashMap<String, Object>> list = new ArrayList<>();
        PreparedStatement preparedStatement = null;
        //设置sql语句
        String sqlString = "SELECT * FROM customermanager.buylist where ";
        //`b_goods_id`, `b_goods_name`, `b_goods_brand`, `b_number`, `b_remark`, `b_date` `b_ID`
        if (!"".equals(nameString)) {
            sqlString += "b_goods_name like '%" + nameString + "%' and ";
        }
        if (!"".equals(beginDate)) {
            sqlString += "b_date > '" + beginDate + "' and ";
        }
        if (!"".equals(endDate)) {
            sqlString += "b_date < '" + endDate + "' and ";
        }
        sqlString += " 1 = 1;";
       // System.out.println(sqlString);
        try {
            connection = DBConnection.getConnection();
            preparedStatement = connection.prepareStatement(sqlString);
            resultSet = preparedStatement.executeQuery();
            //将查询结果保存到list
            ResultSetMetaData mdData = resultSet.getMetaData();
            int columnCount = mdData.getColumnCount();
            while (resultSet.next()) {
                HashMap<String, Object> rowDataMap = new HashMap();
                //`b_goods_id`, `b_goods_name`, `b_goods_brand`, `b_number`, `b_remark`, `b_date` `b_ID`
                rowDataMap.put("b_id", resultSet.getInt("b_id"));
                rowDataMap.put("b_goods_id", resultSet.getInt("b_goods_id"));
                rowDataMap.put("b_goods_name", resultSet.getString("b_goods_name"));
                rowDataMap.put("b_date", resultSet.getDate("b_date"));
                rowDataMap.put("b_goods_brand", resultSet.getString("b_goods_brand"));
                rowDataMap.put("b_number", resultSet.getFloat("b_number"));
                rowDataMap.put("b_remark", resultSet.getString("b_remark"));
                list.add(rowDataMap);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "SQL ERROR", JOptionPane.ERROR_MESSAGE);
        } finally {
            DBConnection.closeConn(connection);
            DBConnection.closeStmt(preparedStatement);
            DBConnection.closeRs(resultSet);
        }
        return list;

    }
}
