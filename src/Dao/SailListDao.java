package Dao;


//import Po.DateTime;
import Po.SailList;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import util.DBConnection;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : customermanager
//  @ File Name : SailListDao.java
//  @ Date : 2017/7/9
//  @ Author : 宋健鑫
//
//




public class SailListDao {
    //INSERT INTO `customermanager`.`saillist` (`s_customer_id`, `s_goods_id`, `s_buy_or_return`, `s_data_time`, `s_number`, `s_remark`, `s_customer_name`, `s_goods_name`) VALUES (?, ?, ?, ?, ?, ?, ?, ?);
    /**
     * 添加销售记录
     * 
     * @param list 销售记录
     * @return  int
     */
    public int add(SailList list) {
            int i=0;
            Connection connection=null;
            PreparedStatement preparedStatement=null;
            String sqlString="INSERT INTO `customermanager`.`saillist` (`s_customer_id`, `s_goods_id`, `s_buy_or_return`, `s_data_time`, `s_number`, `s_remark`, `s_customer_name`, `s_goods_name`) VALUES (?, ?, ?, ?, ?, ?, ?, ?);";
            try {
                connection=DBConnection.getConnection();
                preparedStatement = connection.prepareStatement(sqlString);
                preparedStatement.setInt(1, list.getS_Customer_ID());
                preparedStatement.setInt(2, list.getS_Goods_ID());
                preparedStatement.setString(3, list.getS_Buy_Or_Return());
                preparedStatement.setDate(4, new java.sql.Date( list.getS_Date_Time().getTime()));
                preparedStatement.setFloat(5, list.getS_Number());
                preparedStatement.setString(6, list.getS_Remark());
                preparedStatement.setString(7, list.getS_Customer_Name());
                preparedStatement.setString(8, list.getS_Goods_Name());
                i=preparedStatement.executeUpdate();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e.getMessage(), "SQL ERROR", JOptionPane.ERROR_MESSAGE); 
            }finally{
                DBConnection.closeConn(connection);
                DBConnection.closeStmt(preparedStatement);
            }
            return i;
	
	}
//不可操作	
	public int delete(SailList list) {
            return 0;
	
	}
//不可操作
        public int update(SailList list) {
            return 0;
	
	}
	/**
         * 根据id查找销售记录
         * 
         * @param id id
         * @return 销售信息
         */
	public SailList find(int id) {
            SailList sailList=new SailList();
            ResultSet resultSet = null;
            Connection connection=null;
            PreparedStatement preparedStatement=null;
            String sqlString="SELECT * FROM customermanager.saillist where s_id = ?;";
            try {
                connection=DBConnection.getConnection();
                preparedStatement = connection.prepareStatement(sqlString);
                preparedStatement.setInt(1, id);
                resultSet=preparedStatement.executeQuery();
                if(resultSet.next()){
                //s_customer_id`, `s_goods_id`, `s_buy_or_return`, `s_data_time`, `s_number`,
                //`s_remark`, `s_customer_name`, `s_goods_name`
                sailList.setS_Buy_Or_Return(resultSet.getString("s_buy_or_return"));
                sailList.setS_Customer_ID(resultSet.getInt("s_customer_id"));
                sailList.setS_Customer_Name(resultSet.getString("s_customer_name"));
                sailList.setS_Date_Time(resultSet.getDate("s_data_time"));
                sailList.setS_Goods_ID(resultSet.getInt("s_goods_id"));
                sailList.setS_Goods_Name(resultSet.getString("s_goods_name"));
                sailList.setS_ID(id);
                sailList.setS_Number(resultSet.getFloat("s_number"));
                sailList.setS_Remark(resultSet.getString("s_remark"));
                }else{
                    JOptionPane.showMessageDialog(null, new JLabel("<html><h1>没有找到记录</h1></html>"),"查无此项", JOptionPane.ERROR_MESSAGE);
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e.getMessage(), "SQL ERROR", JOptionPane.ERROR_MESSAGE); 
            }finally{
                DBConnection.closeConn(connection);
                DBConnection.closeStmt(preparedStatement);
                DBConnection.closeRs(resultSet);
            }
            return sailList;
	
	
        }
	/**
         * 按条件检索销售记录
         * 
         * @param beginDate 开始时间
         * @param endDate 结束时间
         * @param goodsNameString 商品名
         * @param customerNameString 用户名
         * @param buyOrReturnString 退货还是购买
         * @return  list
         */
	public ArrayList list(String beginDate, String endDate,String goodsNameString,String customerNameString,String buyOrReturnString) {
            ResultSet resultSet = null;
            Connection connection=null;

            ArrayList<HashMap<String,Object>> list=new ArrayList<HashMap<String,Object>>();
            PreparedStatement preparedStatement=null;
            //初始化sql语句
            String sqlString="SELECT * FROM customermanager.saillist where ";
            //s_customer_id`, `s_goods_id`, `s_buy_or_return`, `s_data_time`, `s_number`,
            //`s_remark`, `s_customer_name`, `s_goods_name`
            if(!"".equals(goodsNameString))
                sqlString+="s_goods_name like '%"+goodsNameString+"%' and ";
            if(!"".equals(customerNameString))
                sqlString+="s_customer_name like '%"+customerNameString+"%' and ";
            if(!"".equals(buyOrReturnString))
                sqlString+="s_buy_or_return = \""+buyOrReturnString+"\" and ";
            if(!"".equals(beginDate))
                sqlString+="s_data_time > '"+beginDate+"' and ";
            if(!"".equals(endDate))
                sqlString+="s_data_time < '"+endDate+"' and "; 
            sqlString+=" 1 = 1;";
            
         //   System.out.println(sqlString);
            try {
                connection=DBConnection.getConnection();
                preparedStatement = connection.prepareStatement(sqlString);
                resultSet=preparedStatement.executeQuery();
                //将结果保存到list
                ResultSetMetaData mdData=resultSet.getMetaData();
                int columnCount=mdData.getColumnCount();
                while (resultSet.next()) {
                    HashMap<String,Object> rowDataMap=new HashMap();
                    //  s_customer_id`, `s_goods_id`, `s_buy_or_return`, `s_data_time`, `s_number`,
                    //`s_remark`, `s_customer_name`, `s_goods_name`
                    rowDataMap.put("s_id", resultSet.getInt("s_id"));
                    rowDataMap.put("s_customer_id", resultSet.getInt("s_customer_id"));
                    rowDataMap.put("s_goods_id", resultSet.getInt("s_goods_id"));
                    rowDataMap.put("s_buy_or_return", resultSet.getString("s_buy_or_return"));
                    rowDataMap.put("s_data_time", resultSet.getDate("s_data_time"));
                    rowDataMap.put("s_goods_name", resultSet.getString("s_goods_name"));
                    rowDataMap.put("s_customer_name", resultSet.getString("s_customer_name"));
                    rowDataMap.put("s_number", resultSet.getFloat("s_number"));
                    rowDataMap.put("s_remark", resultSet.getString("s_remark"));
                    list.add(rowDataMap);
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e.getMessage(), "SQL ERROR", JOptionPane.ERROR_MESSAGE); 
            }finally{
                DBConnection.closeConn(connection);
                DBConnection.closeStmt(preparedStatement);
                DBConnection.closeRs(resultSet);
            }
            return list;
            
	
	}
           
}
