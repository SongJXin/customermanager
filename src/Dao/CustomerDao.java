package Dao;

import Po.Customer;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import util.DBConnection;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : customermanager
//  @ File Name : CustomerDao.java
//  @ Date : 2017/7/9
//  @ Author : 宋健鑫
//
//
public class CustomerDao {
    //INSERT INTO `customermanager`.`customer` (`c_name`, `c_card_number`, `c_integration`, `c_tell`, `c_sex`, `c_address`, `c_cash`, `c_remark`) VALUES (?,?, ?, ?, ?, ?, ?, ?);

    /**
     * 添加客户
     *
     * @param customer 客户
     * @return int
     */
    public int add(Customer customer) {
        int i = 0;
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        String sqlString = "INSERT INTO `customermanager`.`customer` (`c_name`, `c_card_number`, `c_integration`, `c_tell`, `c_sex`, `c_address`, `c_cash`, `c_remark`) VALUES (?,?, ?, ?, ?, ?, ?, ?);";
        try {
            connection = DBConnection.getConnection();
            preparedStatement = connection.prepareStatement(sqlString);
            preparedStatement.setString(1, customer.getC_Name());
            preparedStatement.setString(2, customer.getC_Card_Number());
            preparedStatement.setString(4, customer.getC_Tell());
            preparedStatement.setFloat(3, customer.getC_Integration());
            preparedStatement.setFloat(7, customer.getC_Cash());
            preparedStatement.setString(5, customer.getC_Sex());
            preparedStatement.setString(6, customer.getC_Address());
            preparedStatement.setString(8, customer.getC_Remark());
            i = preparedStatement.executeUpdate();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "SQL ERROR", JOptionPane.ERROR_MESSAGE);
        } finally {
            DBConnection.closeConn(connection);
            DBConnection.closeStmt(preparedStatement);
        }
        return i;

    }

    /**
     * 删除客户
     *
     * @param customer 客户
     * @return int
     */
    public int delete(Customer customer) {
        int i = 0;
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        String sqlString = "delete from `customermanager`.`customer` where c_ID=?;";
        try {
            connection = DBConnection.getConnection();
            preparedStatement = connection.prepareStatement(sqlString);
            preparedStatement.setInt(1, customer.getC_ID());
            i = preparedStatement.executeUpdate();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "SQL ERROR", JOptionPane.ERROR_MESSAGE);
        } finally {
            DBConnection.closeConn(connection);
            DBConnection.closeStmt(preparedStatement);
        }
        return i;

    }
    //UPDATE `customermanager`.`customer` SET `c_name`=?, `c_card_number`=?, `c_integration`=?, `c_tell`=?, `c_sex`=?, `c_address`=?, `c_cash`=?, `c_remark`=? WHERE `c_ID`=?;

    /**
     * 修改用户信息
     *
     * @param customer 客户
     * @return int
     */
    public int update(Customer customer) {
        int i = 0;
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        String sqlString = "UPDATE `customermanager`.`customer` SET `c_name`=?, `c_card_number`=?, `c_integration`=?, `c_tell`=?, `c_sex`=?, `c_address`=?, `c_cash`=?, `c_remark`=? WHERE `c_ID`=?;";
        try {
            connection = DBConnection.getConnection();
            preparedStatement = connection.prepareStatement(sqlString);
            preparedStatement.setString(1, customer.getC_Name());
            preparedStatement.setString(2, customer.getC_Card_Number());
            preparedStatement.setString(4, customer.getC_Tell());
            preparedStatement.setFloat(3, customer.getC_Integration());
            preparedStatement.setFloat(7, customer.getC_Cash());
            preparedStatement.setString(5, customer.getC_Sex());
            preparedStatement.setString(6, customer.getC_Address());
            preparedStatement.setString(8, customer.getC_Remark());
            preparedStatement.setInt(9, customer.getC_ID());
            i = preparedStatement.executeUpdate();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "SQL ERROR", JOptionPane.ERROR_MESSAGE);
        } finally {
            DBConnection.closeConn(connection);
            DBConnection.closeStmt(preparedStatement);
        }
        return i;

    }

    /**
     * 按id查找用户
     *
     * @param id id
     * @return 客户信息
     */
    public Customer find(int id) {
        Customer customer = new Customer();
        ResultSet resultSet = null;
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        String sqlString = "SELECT * FROM customermanager.customer where c_id = ?;";
        try {
            connection = DBConnection.getConnection();
            preparedStatement = connection.prepareStatement(sqlString);
            preparedStatement.setInt(1, id);
            resultSet = preparedStatement.executeQuery();
            if (resultSet.next()) {
                //`c_name`, `c_card_number`, `c_integration`, `c_tell`, `c_sex`, `c_address`, `c_cash`, `c_remark`
                customer.setC_Address(resultSet.getString("c_address"));
                customer.setC_Card_Number(resultSet.getString("c_card_number"));
                customer.setC_Cash(resultSet.getFloat("c_cash"));
                customer.setC_ID(id);
                customer.setC_Integration(resultSet.getFloat("c_integration"));
                customer.setC_Name(resultSet.getString("c_name"));
                customer.setC_Remark(resultSet.getString("c_remark"));
                customer.setC_Sex(resultSet.getString("c_sex"));
                customer.setC_Tell(resultSet.getString("c_tell"));
            } else {
                JOptionPane.showMessageDialog(null, new JLabel("<html><h1>没有找到记录</h1></html>"), "查无此项", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "SQL ERROR", JOptionPane.ERROR_MESSAGE);
        } finally {
            DBConnection.closeConn(connection);
            DBConnection.closeStmt(preparedStatement);
            DBConnection.closeRs(resultSet);
        }
        return customer;

    }

    /**
     * 按条件检索用户
     *
     * @param nameString 客户名
     * @param tellString 客户电话
     * @param addressString 客户地址
     * @param cardNumberString 身份证号
     * @return list
     */
    public ArrayList list(String nameString, String tellString, String addressString, String cardNumberString) {
        ResultSet resultSet = null;
        Connection connection = null;

        ArrayList<HashMap<String, Object>> list = new ArrayList<>();
        PreparedStatement preparedStatement = null;
        //初始化sql语句
        String sqlString = "SELECT * FROM customermanager.customer where ";
        if (!"".equals(nameString)) {
            sqlString += "c_name like '%" + nameString + "%' and ";
        }
        if (!"".equals(tellString)) {
            sqlString += "c_tell like '%" + tellString + "%' and ";
        }
        if (!"".equals(addressString)) {
            sqlString += "c_address like '%" + addressString + "%' and ";
        }
        if (!"".equals(cardNumberString)) {
            sqlString += "c_card_number like '%" + cardNumberString + "%' and ";
        }
        sqlString += " 1 = 1;";
        // System.out.println(sqlString);
        try {
            connection = DBConnection.getConnection();
            preparedStatement = connection.prepareStatement(sqlString);
            resultSet = preparedStatement.executeQuery();
            //将结果保存到list
            ResultSetMetaData mdData = resultSet.getMetaData();
            //int columnCount=mdData.getColumnCount();
            while (resultSet.next()) {
                HashMap<String, Object> rowDataMap = new HashMap();
                //`c_name`, `c_card_number`, `c_integration`, `c_tell`, `c_sex`, `c_address`, `c_cash`, `c_remark`
                rowDataMap.put("c_id", resultSet.getString("c_id"));
                rowDataMap.put("c_name", resultSet.getString("c_name"));
                rowDataMap.put("c_card_number", resultSet.getString("c_card_number"));
                rowDataMap.put("c_integration", resultSet.getFloat("c_integration"));
                rowDataMap.put("c_tell", resultSet.getString("c_tell"));
                rowDataMap.put("c_sex", resultSet.getString("c_sex"));
                rowDataMap.put("c_address", resultSet.getString("c_address"));
                rowDataMap.put("c_cash", resultSet.getFloat("c_cash"));
                rowDataMap.put("c_remark", resultSet.getString("c_remark"));
                list.add(rowDataMap);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "SQL ERROR", JOptionPane.ERROR_MESSAGE);
        } finally {
            DBConnection.closeConn(connection);
            DBConnection.closeStmt(preparedStatement);
            DBConnection.closeRs(resultSet);
        }
        return list;
    }
}
